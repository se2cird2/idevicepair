name: pair_gui build

on:
  push:
    branches: [ main ]

env:
  BINARY_NAME: pair
  FLATPAK_ID: com.github.se2cird2.idevicepair
  APPIMAGE_ICON: icons/idevicepair.png

jobs:
  build-linux-x64:
    name: Build Linux x86_64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-unknown-linux-gnu
      - name: Build
        run: cargo build --release --bin ${{ env.BINARY_NAME }} \
             --target x86_64-unknown-linux-gnu
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: target/x86_64-unknown-linux-gnu/release/${{ env.BINARY_NAME }}

  build-linux-arm64:
    name: Build Linux ARM64
    runs-on: ubuntu-22.04-arm
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: aarch64-unknown-linux-gnu
      - name: Build
        run: cargo build --release --bin ${{ env.BINARY_NAME }} \
             --target aarch64-unknown-linux-gnu
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64
          path: target/aarch64-unknown-linux-gnu/release/${{ env.BINARY_NAME }}

  flatpak-build:
    name: Build Flatpak bundles
    runs-on: ubuntu-latest
    needs: [build-linux-x64, build-linux-arm64]
    container:
      image: ghcr.io/flathub-infra/flatpak-github-actions:gnome-48
      options: --privileged
    strategy:
      matrix:
        arch: [x86_64, aarch64]
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: linux-${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}
          path: build-artifacts
      - name: Prepare binary
        run: cp build-artifacts/${{ env.BINARY_NAME }} .
      - name: Create Flatpak manifest
        run: |
          cat > ${FLATPAK_ID}.json <<EOF
          {
            "app-id": "${FLATPAK_ID}",
            "runtime": "org.freedesktop.Platform",
            "runtime-version": "21.08",
            "sdk": "org.freedesktop.Sdk",
            "command": "${BINARY_NAME}",
            "modules": [{
              "name": "${BINARY_NAME}",
              "buildsystem": "simple",
              "build-commands": [
                "install -Dm755 ${BINARY_NAME} /app/bin/${BINARY_NAME}"
              ],
              "sources": [{ "type": "file", "path": "${BINARY_NAME}" }]
            }]
          }
          EOF
      - name: Build Flatpak
        uses: flatpak/flatpak-github-actions/flatpak-builder@v6
        with:
          manifest-path: ${FLATPAK_ID}.json
          bundle: ${FLATPAK_ID}-${{ matrix.arch }}.flatpak
      - name: Upload Flatpak bundle
        uses: actions/upload-artifact@v4
        with:
          name: flatpak-${{ matrix.arch }}
          path: ${FLATPAK_ID}-${{ matrix.arch }}.flatpak

build-macos-slices:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - run: brew uninstall rustup rustup-init || true
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
      - run: cargo build --release --bin ${{ env.BINARY_NAME }} --target x86_64-apple-darwin
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
      - run: cargo build --release --bin ${{ env.BINARY_NAME }} --target aarch64-apple-darwin
      - uses: actions/upload-artifact@v4
        with:
          name: macos-x64
          path: target/x86_64-apple-darwin/release/${{ env.BINARY_NAME }}
      - uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: target/aarch64-apple-darwin/release/${{ env.BINARY_NAME }}

  package-macos-universal:
    runs-on: macos-latest
    needs: build-macos-slices
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: macos-x64
          path: slice-x64
      - uses: actions/download-artifact@v4
        with:
          name: macos-arm64
          path: slice-arm64
      - run: |
          mkdir -p release
          lipo slice-x64/${{ env.BINARY_NAME }} slice-arm64/${{ env.BINARY_NAME }} -create -output release/${{ env.BINARY_NAME }}
      - uses: actions/upload-artifact@v4
        with:
          name: macos-universal
          path: release/${{ env.BINARY_NAME }}

  package-macos-bundle:
    runs-on: macos-latest
    needs: package-macos-universal
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: macos-universal
          path: release
      - run: |
          APP="${{ env.BINARY_NAME }}"
          mkdir -p "${APP}.app/Contents/MacOS" "${APP}.app/Contents/Resources"
          cp release/${APP} "${APP}.app/Contents/MacOS/${APP}"
          cat > "${APP}.app/Contents/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"  
            "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>CFBundleName</key><string>${APP}</string>
              <key>CFBundleIdentifier</key><string>${{ env.FLATPAK_ID }}</string>
              <key>CFBundleVersion</key><string>1.0.0</string>
              <key>CFBundlePackageType</key><string>APPL</string>
              <key>CFBundleExecutable</key><string>${APP}</string>
              <key>CFBundleIconFile</key><string>idevicepair.icns</string>
            </dict>
          </plist>
          EOF
      - run: |
          sips -s format icns "${{ env.APPIMAGE_ICON }}" --out "${{ env.BINARY_NAME }}.app/Contents/Resources/idevicepair.icns"
      - run: |
          APP="${{ env.BINARY_NAME }}"
          rm -f "release/${APP}.dmg"
          hdiutil create -volname "$APP" -srcfolder "${APP}.app" -ov -format UDZO "release/${APP}.dmg"
      - uses: actions/upload-artifact@v4
        with:
          name: macos-distribution
          path: |
            ${{ env.BINARY_NAME }}.app
            release/${{ env.BINARY_NAME }}.dmg


  build-windows:
    name: Build Windows (MSVC)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-pc-windows-msvc
      - name: Build
        run: cargo build --release --bin ${{ env.BINARY_NAME }} \
             --target x86_64-pc-windows-msvc
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-msvc
          path: target/x86_64-pc-windows-msvc/release/${{ env.BINARY_NAME }}.exe
