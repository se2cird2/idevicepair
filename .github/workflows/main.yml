# .github/workflows/macos-hdiutil.yml
name: macOS Build & Bundle (hdiutil)

on:
  push:
    branches: [ main ]

env:
  BINARY_NAME: pair
  VERSION: 1.0.0
  ICON_PNG: icons/idevicepair.png

jobs:
  build-slices:
    name: Build macOS Slices
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Uninstall Homebrew rustup
        run: brew uninstall rustup rustup-init || true

      - name: Set up Rust (x86_64)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-apple-darwin

      - name: Build Intel slice
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target x86_64-apple-darwin

      - name: Set up Rust (ARM64)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: aarch64-apple-darwin

      - name: Build ARM64 slice
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target aarch64-apple-darwin

      - name: Upload Intel slice
        uses: actions/upload-artifact@v4
        with:
          name: macos-x64
          path: target/x86_64-apple-darwin/release/${{ env.BINARY_NAME }}

      - name: Upload ARM64 slice
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: target/aarch64-apple-darwin/release/${{ env.BINARY_NAME }}

  universal:
    name: Create Universal Binary
    needs: build-slices
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Intel slice
        uses: actions/download-artifact@v4
        with:
          name: macos-x64
          path: slice-x64

      - name: Download ARM64 slice
        uses: actions/download-artifact@v4
        with:
          name: macos-arm64
          path: slice-arm64

      - name: Build universal binary
        run: |
          mkdir -p release
          lipo slice-x64/${{ env.BINARY_NAME }} slice-arm64/${{ env.BINARY_NAME }} \
            -create -output release/${{ env.BINARY_NAME }}

      - name: Upload universal artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal
          path: release/${{ env.BINARY_NAME }}

  bundle-hdiutil:
    name: Bundle .app & .dmg (hdiutil)
    needs: universal
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Universal Binary
        uses: actions/download-artifact@v4
        with:
          name: macos-universal
          path: release

      - name: Create .app Bundle
        run: |
          APP=${{ env.BINARY_NAME }}
          mkdir -p "${APP}.app/Contents/MacOS" "${APP}.app/Contents/Resources"
          cp release/${APP} "${APP}.app/Contents/MacOS/${APP}"
          cat > "${APP}.app/Contents/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" \
            "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>CFBundleName</key><string>${APP}</string>
              <key>CFBundleIdentifier</key><string>com.github.se2cird2.idevicepair</string>
              <key>CFBundleVersion</key><string>${{ env.VERSION }}</string>
              <key>CFBundlePackageType</key><string>APPL</string>
              <key>CFBundleExecutable</key><string>${APP}</string>
              <key>CFBundleIconFile</key><string>idevicepair.icns</string>
            </dict>
          </plist>
          EOF

      - name: Convert Icon to ICNS
        run: |
          sips -s format icns "${{ env.ICON_PNG }}" \
            --out "${{ env.BINARY_NAME }}.app/Contents/Resources/idevicepair.icns"

      - name: Generate DMG with hdiutil
        run: |
          APP=${{ env.BINARY_NAME }}
          mkdir -p release
          rm -f "release/${APP}.dmg"
          hdiutil create \
            -volname "$APP" \
            -srcfolder "${APP}.app" \
            -ov -format UDZO \
            "release/${APP}.dmg"

      - name: Upload .app and .dmg
        uses: actions/upload-artifact@v4
        with:
          name: macos-distribution-hdiutil
          path: |
            ${{ env.BINARY_NAME }}.app
            release/${{ env.BINARY_NAME }}.dmg
