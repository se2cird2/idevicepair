name: CI

on:
  push:
    branches: [ main ]

env:
  BINARY_NAME: pair

jobs:
  # ────────────────────────────────────────────────────────────────────────────
  # 1) Checkout & Cache Dependencies
  checkout-and-cache:
    name: 🔄 Checkout & Cache
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔑 Compute cache key
        id: cache-key
        run: echo "::set-output name=key::$(date +%Y-%m-%d)-${{ hashFiles('**/Cargo.lock') }}"

      - name: 📦 Cache crates.io index and Git repos
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ steps.cache-key.outputs.key }}

      - name: 🗄 Cache built targets
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ steps.cache-key.outputs.key }}

  # ────────────────────────────────────────────────────────────────────────────
  # 2) Lint (rustfmt + clippy)
  lint:
    name: 🧹 Lint & Format
    runs-on: ubuntu-latest
    needs: checkout-and-cache
    steps:
      - uses: actions/checkout@v3
      - name: ⚙️ Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: 🔍 Check formatting
        run: cargo fmt -- --check
      - name: 🚨 Run Clippy
        run: cargo clippy --all-targets -- -D warnings

  # ────────────────────────────────────────────────────────────────────────────
  # 3) Build Linux x86_64
  build-linux-x64:
    name: 🐧 Build Linux x86_64
    runs-on: ubuntu-latest
    needs: checkout-and-cache
    steps:
      - uses: actions/checkout@v3
      - name: ⚙️ Set up Rust (x86_64)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-unknown-linux-gnu
      - name: 🔨 Compile
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target x86_64-unknown-linux-gnu
      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: target/x86_64-unknown-linux-gnu/release/${{ env.BINARY_NAME }}

  # ────────────────────────────────────────────────────────────────────────────
  # 4) Build Linux ARM64
  build-linux-arm64:
    name: 🐧 Build Linux ARM64
    runs-on: ubuntu-22.04-arm
    needs: checkout-and-cache
    steps:
      - uses: actions/checkout@v3
      - name: ⚙️ Set up Rust (ARM64)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: aarch64-unknown-linux-gnu
      - name: 🔨 Compile
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target aarch64-unknown-linux-gnu
      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64
          path: target/aarch64-unknown-linux-gnu/release/${{ env.BINARY_NAME }}

  # ────────────────────────────────────────────────────────────────────────────
  # 5) Build macOS x86_64 slice
  build-macos-x64:
    name: 🍎 Build macOS x86_64
    runs-on: macos-latest
    needs: checkout-and-cache
    steps:
      - uses: actions/checkout@v3
      - name: ⚙️ Set up Rust (macOS x64)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-apple-darwin
      - name: 🍺 Install dependencies
        run: brew install libimobiledevice libplist libusbmuxd
      - name: 🔨 Compile
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target x86_64-apple-darwin
      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-x64
          path: target/x86_64-apple-darwin/release/${{ env.BINARY_NAME }}

  # ────────────────────────────────────────────────────────────────────────────
  # 6) Build macOS ARM64 slice
  build-macos-arm64:
    name: 🍎 Build macOS ARM64
    runs-on: macos-latest
    needs: checkout-and-cache
    steps:
      - uses: actions/checkout@v3
      - name: ⚙️ Set up Rust (macOS ARM64)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: aarch64-apple-darwin
      - name: 🍺 Install dependencies
        run: brew install libimobiledevice libplist libusbmuxd
      - name: 🔨 Compile
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target aarch64-apple-darwin
      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: target/aarch64-apple-darwin/release/${{ env.BINARY_NAME }}

  # ────────────────────────────────────────────────────────────────────────────
  # 7) Package macOS Universal
  package-macos:
    name: 🍏 Package macOS Universal
    needs:
      - build-macos-x64
      - build-macos-arm64
    runs-on: macos-latest
    steps:
      - name: 🔽 Download x64 slice
        uses: actions/download-artifact@v4
        with:
          name: macos-x64
          path: slice-x64
      - name: 🔽 Download ARM64 slice
        uses: actions/download-artifact@v4
        with:
          name: macos-arm64
          path: slice-arm64
      - name: 🔨 lipo into universal
        run: |
          mkdir -p target/universal/release
          lipo \
            slice-x64/${{ env.BINARY_NAME }} \
            slice-arm64/${{ env.BINARY_NAME }} \
            -create -output target/universal/release/${{ env.BINARY_NAME }}
      - name: 📤 Upload universal
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal
          path: target/universal/release/${{ env.BINARY_NAME }}

  # ────────────────────────────────────────────────────────────────────────────
  # 8) Build Windows MSVC
  build-windows:
    name: 🪟 Build Windows MSVC
    runs-on: windows-latest
    needs: checkout-and-cache
    steps:
      - uses: actions/checkout@v3
      - name: ⚙️ Set up Rust (Windows)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-pc-windows-msvc
      - name: 🔨 Compile (single-line)
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target x86_64-pc-windows-msvc
      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-msvc
          path: target/x86_64-pc-windows-msvc/release/${{ env.BINARY_NAME }}.exe
