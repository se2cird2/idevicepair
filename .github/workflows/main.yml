name: iDevicePair Builds

on:
  push:
    branches: [ main ]

env:
  BINARY_NAME: pair
  VERSION: 1.0.0
  ICON_PNG: icons/idevicepair.png

jobs:

  build-appimage:
    name: Build AppImage for ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            toolfile: appimagetool-x86_64.AppImage
          - arch: aarch64
            runner: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            toolfile: appimagetool-aarch64.AppImage
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: ${{ matrix.target }}
      - name: Install FUSE & AppStream
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 appstream
      - name: Build native binary
        run: |
          cargo build --release --bin ${{ env.BINARY_NAME }} --target ${{ matrix.target }}
      - name: Download appimagetool
        run: |
          wget -c https://github.com/AppImage/AppImageKit/releases/download/continuous/${{ matrix.toolfile }} -O appimagetool.AppImage
          chmod +x appimagetool.AppImage
      - name: Prepare AppDir
        run: |
          mkdir -p AppDir/usr/bin AppDir/usr/share/icons/hicolor/256x256/apps
          cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} AppDir/usr/bin/
          ICON_NAME=${ICON_PNG##*/}
          ICON_BASENAME=${ICON_NAME%.*}
          cp ${{ env.ICON_PNG }} AppDir/${ICON_BASENAME}.png
          cp ${{ env.ICON_PNG }} AppDir/usr/share/icons/hicolor/256x256/apps/${ICON_BASENAME}.png
          cat > AppDir/${{ env.BINARY_NAME }}.desktop <<EOF
          [Desktop Entry]
          Type=Application
          Name=iDevicePair
          Exec=${{ env.BINARY_NAME }} %u
          Icon=${ICON_BASENAME}
          Categories=Utility;
          EOF
          ln -s usr/bin/${{ env.BINARY_NAME }} AppDir/AppRun
          chmod +x AppDir/AppRun
      - name: Build AppImage
        run: |
          ./appimagetool.AppImage AppDir iDevicePair-${{ env.VERSION }}-${{ matrix.arch }}.AppImage
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: iDevicePair-${{ env.VERSION }}-${{ matrix.arch }}.AppImage
          path: iDevicePair-${{ env.VERSION }}-${{ matrix.arch }}.AppImage

  build-macos-app:
    name: Build macOS Universal .app
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
        include:
          - arch: x86_64
            target: x86_64-apple-darwin
          - arch: arm64
            target: aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: ${{ matrix.target }}

      - name: Build slice ${{ matrix.arch }}
        run: |
          cargo build --release --bin ${BINARY_NAME} --target ${{ matrix.target }}

      - name: Upload slice artifacts
        uses: actions/upload-artifact@v4
        with:
          name: slice-${{ matrix.arch }}
          path: target/${{ matrix.target }}/release/${BINARY_NAME}

  create-universal-app:
    name: Create Universal .app Bundle
    needs: build-macos-app
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download x86_64 slice
        uses: actions/download-artifact@v4
        with:
          name: slice-x86_64
          path: slice-x86_64

      - name: Download arm64 slice
        uses: actions/download-artifact@v4
        with:
          name: slice-arm64
          path: slice-arm64

      - name: Create universal binary
        run: |
          mkdir -p build
          lipo slice-x86_64/${BINARY_NAME} slice-arm64/${BINARY_NAME} \
            -create -output build/${BINARY_NAME}

      - name: Bundle into .app
        run: |
          APP=${BINARY_NAME}.app
          mkdir -p "$APP/Contents/MacOS" "$APP/Contents/Resources"
          cp build/${BINARY_NAME} "$APP/Contents/MacOS/${BINARY_NAME}"
          chmod +x "$APP/Contents/MacOS/${BINARY_NAME}"
          cat > "$APP/Contents/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleName</key><string>${BINARY_NAME}</string>
            <key>CFBundleIdentifier</key><string>com.github.se2cird2.${BINARY_NAME}</string>
            <key>CFBundleVersion</key><string>${VERSION}</string>
            <key>CFBundleShortVersionString</key><string>${VERSION}</string>
            <key>CFBundleExecutable</key><string>${BINARY_NAME}</string>
            <key>CFBundleIconFile</key><string>idevicepair.icns</string>
          </dict>
          </plist>
          EOF
          # Icon conversion
          sips -s format icns "${ICON_PNG}" --out "$APP/Contents/Resources/idevicepair.icns"
          # Remove quarantine attrs
          xattr -rc "$APP"

      - name: Upload .app artifact
        uses: actions/upload-artifact@v4
        with:
          name: iDevicePair-${VERSION}.app
          path: iDevicePair.app

  build-windows:
    name: Build Windows (MSVC)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-pc-windows-msvc
      - name: Build
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target x86_64-pc-windows-msvc
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-msvc
          path: target/x86_64-pc-windows-msvc/release/${{ env.BINARY_NAME }}.exe
