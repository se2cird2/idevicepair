name: CI

on:
  push:
    branches: [ main ]

env:
  BINARY_NAME: pair

jobs:
  # ───────────────────────────────────────────────────────────────────────────
  # Linux x86_64 (native + AppImage)
  build-linux-x64:
    name: Build & Bundle Linux x86_64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-unknown-linux-gnu

      - name: Build native binary
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target x86_64-unknown-linux-gnu

      - name: Install cargo-bundle
        run: cargo install cargo-bundle

      - name: Create AppImage
        run: |
          # Ensure binary is in target/release
          cp target/x86_64-unknown-linux-gnu/release/${{ env.BINARY_NAME }} target/release/
          # Bundle as AppImage
          cargo bundle --release --bin ${{ env.BINARY_NAME }} --format appimage --target x86_64-unknown-linux-gnu

      - name: Upload native binary
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-binary
          path: target/x86_64-unknown-linux-gnu/release/${{ env.BINARY_NAME }}

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-appimage
          path: target/release/bundle/appimage/${{ env.BINARY_NAME }}*.AppImage

  # ───────────────────────────────────────────────────────────────────────────
  # Linux ARM64 (native + AppImage)
  build-linux-arm64:
    name: Build & Bundle Linux ARM64
    runs-on: ubuntu-22.04-arm
    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: aarch64-unknown-linux-gnu

      - name: Build native binary
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target aarch64-unknown-linux-gnu

      - name: Install cargo-bundle
        run: cargo install cargo-bundle

      - name: Create AppImage
        run: |
          cp target/aarch64-unknown-linux-gnu/release/${{ env.BINARY_NAME }} target/release/
          cargo bundle --release --bin ${{ env.BINARY_NAME }} --format appimage --target aarch64-unknown-linux-gnu

      - name: Upload native binary
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-binary
          path: target/aarch64-unknown-linux-gnu/release/${{ env.BINARY_NAME }}

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-appimage
          path: target/release/bundle/appimage/${{ env.BINARY_NAME }}*.AppImage

  # ───────────────────────────────────────────────────────────────────────────
  # macOS slices (Intel + ARM) + .app bundle
  build-macos-slices:
    name: Build macOS slices
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Uninstall Homebrew rustup
        run: brew uninstall rustup rustup-init || true

      - name: Set up Rust (Intel)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-apple-darwin

      - name: Build Intel slice
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target x86_64-apple-darwin

      - name: Set up Rust (ARM64)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: aarch64-apple-darwin

      - name: Build ARM64 slice
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target aarch64-apple-darwin

      - name: Upload Intel slice
        uses: actions/upload-artifact@v4
        with:
          name: macos-x64-binary
          path: target/x86_64-apple-darwin/release/${{ env.BINARY_NAME }}

      - name: Upload ARM64 slice
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-binary
          path: target/aarch64-apple-darwin/release/${{ env.BINARY_NAME }}

  # ───────────────────────────────────────────────────────────────────────────
  # macOS universal + .app bundle
  package-macos:
    name: Package macOS Universal & .app
    needs: build-macos-slices
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download slices
        uses: actions/download-artifact@v4
        with:
          name: macos-x64-binary
          path: slice-x64
      - uses: actions/download-artifact@v4
        with:
          name: macos-arm64-binary
          path: slice-arm64

      - name: Create universal binary
        run: |
          mkdir -p target/universal/release
          lipo \
            slice-x64/${{ env.BINARY_NAME }} \
            slice-arm64/${{ env.BINARY_NAME }} \
            -create -output target/universal/release/${{ env.BINARY_NAME }}

      - name: Install cargo-bundle
        run: cargo install cargo-bundle

      - name: Create .app bundle
        run: |
          # Move universal binary into standard release dir
          cp target/universal/release/${{ env.BINARY_NAME }} target/release/
          # Bundle as macOS .app
          cargo bundle --release --bin ${{ env.BINARY_NAME }} --format osx

      - name: Upload universal binary
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal-binary
          path: target/universal/release/${{ env.BINARY_NAME }}

      - name: Upload .app bundle
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: target/release/bundle/osx/${{ env.BINARY_NAME }}.app

  # ───────────────────────────────────────────────────────────────────────────
  # Windows MSVC (native only)
  build-windows:
    name: Build Windows (MSVC)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-pc-windows-msvc

      - name: Build
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target x86_64-pc-windows-msvc
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-msvc
          path: target/x86_64-pc-windows-msvc/release/${{ env.BINARY_NAME }}.exe
