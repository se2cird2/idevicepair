# .github/workflows/build-appimage.yml
name: Linux Build & AppImage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BINARY_NAME: pair
  APPIMAGE_RECIPE: AppImageBuilder.yml

jobs:
  build-appimage:
    name: Build & Package AppImage
    runs-on: ubuntu-latest

    steps:
      # 1) Fetch the code
      - uses: actions/checkout@v3

      # 2) Install Rust toolchain and build release
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Build release binary
        run: cargo build --release --bin ${{ env.BINARY_NAME }}

      # 3) Prepare AppDir layout
      - name: Create AppDir
        run: |
          mkdir -p AppDir/usr/bin
          cp target/release/${{ env.BINARY_NAME }} AppDir/usr/bin/

          # Copy your icon and desktop file into AppDir
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          cp icons/idevicepair.png AppDir/usr/share/icons/hicolor/256x256/apps/${{ env.BINARY_NAME }}.png

          mkdir -p AppDir/usr/share/applications
          cp packaging/idevicepair.desktop AppDir/usr/share/applications/

      # 4) Install any native deps your recipe needs (optional)
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2  # example: FUSE support

      # 5) Build the AppImage using the official action
      - name: Build AppImage
        uses: AppImageCrafters/build-appimage-action@master
        with:
          recipe: ${{ env.APPIMAGE_RECIPE }}
        env:
          # Optional: enable auto-update metadata
          UPDATE_INFO: gh-releases-zsync|${{ github.repository_owner }}|${{ github.event.repository.name }}|latest|*.AppImage.zsync

      # 6) Upload the AppImage and zsync file
      - uses: actions/upload-artifact@v4
        with:
          name: AppImage
          path: |
            *.AppImage
            *.AppImage.zsync
