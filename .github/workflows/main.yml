# .github/workflows/ci.yml
name: iDevicePair Builds

on:
  push:
    branches: [ main ]

env:
  BINARY_NAME: pairgui
  APP_NAME: iDevicePair
  VERSION: 0.0.1
  ICON_PNG: icons/idevicepair.png

jobs:
  # Linux: Build AppImage for x86_64 and aarch64
  build-appimage:
    name: Build & Upload AppImage for ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            toolfile: appimagetool-x86_64.AppImage
          - arch: aarch64
            runner: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            toolfile: appimagetool-aarch64.AppImage
    steps:
      - uses: actions/checkout@v3

      - name: Cache Cargo registry & build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/index
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.target }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: ${{ matrix.target }}

      - name: Install FUSE & AppStream
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2 appstream

      - name: Build native binary
        run: |
          cargo build --release --bin ${{ env.BINARY_NAME }} --target ${{ matrix.target }}

      - name: Download appimagetool
        run: |
          wget -c https://github.com/AppImage/AppImageKit/releases/download/continuous/${{ matrix.toolfile }} \
            -O appimagetool.AppImage
          chmod +x appimagetool.AppImage

      - name: Prepare AppDir
        run: |
          mkdir -p AppDir/usr/bin AppDir/usr/share/icons/hicolor/256x256/apps
          cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} AppDir/usr/bin/
          ICON_NAME=${ICON_PNG##*/}
          ICON_BASENAME=${ICON_NAME%.*}
          cp ${{ env.ICON_PNG }} AppDir/${ICON_BASENAME}.png
          cp ${{ env.ICON_PNG }} AppDir/usr/share/icons/hicolor/256x256/apps/${ICON_BASENAME}.png
          cat > AppDir/${{ env.BINARY_NAME }}.desktop <<EOF
          [Desktop Entry]
          Type=Application
          Name=${{ env.APP_NAME }}
          Exec=${{ env.BINARY_NAME }} %u
          Icon=${ICON_BASENAME}
          Categories=Utility;
          EOF
          ln -s usr/bin/${{ env.BINARY_NAME }} AppDir/AppRun
          chmod +x AppDir/AppRun

      - name: Build AppImage
        run: |
          FILENAME="${{ env.APP_NAME }}-${{ env.VERSION }}-linux-${{ matrix.arch }}.AppImage"
          ./appimagetool.AppImage AppDir "$FILENAME"

      - name: Upload AppImage
        uses: actions/upload-artifact@v4.4.0
        with:
          include-hidden-files: true
          name: ${{ env.APP_NAME }}-${{ env.VERSION }}-linux-${{ matrix.arch }}.AppImage
          path: ${{ env.APP_NAME }}-${{ env.VERSION }}-linux-${{ matrix.arch }}.AppImage

  # macOS: Build universal .app
  macos-universal:
    name: Build & Upload macOS Universal .app
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x86_64, arm64]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust for ${{ matrix.arch }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: ${{ matrix.arch == 'x86_64' && 'x86_64-apple-darwin' || 'aarch64-apple-darwin' }}

      - name: Build ${{ matrix.arch }} slice
        run: |
          cargo build --release \
            --bin ${{ env.BINARY_NAME }} \
            --target ${{ matrix.arch == 'x86_64' && 'x86_64-apple-darwin' || 'aarch64-apple-darwin' }}

      - name: Upload ${{ matrix.arch }} slice
        uses: actions/upload-artifact@v4.4.0
        with:
          include-hidden-files: true
          name: slice-${{ matrix.arch }}
          path: target/${{ matrix.arch == 'x86_64' && 'x86_64-apple-darwin' || 'aarch64-apple-darwin' }}/release/${{ env.BINARY_NAME }}

  # Combine slices into a universal .app and upload it
  macos-bundle:
    name: Create & Upload Universal .app Bundle
    needs: macos-universal
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download x86_64 slice
        uses: actions/download-artifact@v4
        with:
          name: slice-x86_64
          path: slice-x86_64

      - name: Download arm64 slice        
        uses: actions/download-artifact@v4
        with:
          name: slice-arm64
          path: slice-arm64

      - name: Create .app Bundle              
        run: |
          APP=${{ env.BINARY_NAME }}
          mkdir -p "${APP}.app/Contents/MacOS" "${APP}.app/Contents/Resources"

          # merge the two architecture slices into one universal binary
          lipo -create slice-x86_64/${APP} slice-arm64/${APP} \
               -output "${APP}.app/Contents/MacOS/${APP}"
          chmod +x "${APP}.app/Contents/MacOS/${APP}"

          cat > "${APP}.app/Contents/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>CFBundleName</key><string>${APP}</string>
            <key>CFBundleIdentifier</key><string>com.github.se2cird2.${APP}</string>
            <key>CFBundleVersion</key><string>${VERSION}</string>
            <key>CFBundleShortVersionString</key><string>${VERSION}</string>
            <key>CFBundleInfoDictionaryVersion</key><string>6.0</string>
            <key>CFBundlePackageType</key><string>APPL</string>
            <key>CFBundleExecutable</key><string>${APP}</string>
            <key>CFBundleIconFile</key><string>idevicepair.icns</string>
          </dict>
          </plist>
          EOF

          sips -s format icns "${{ env.ICON_PNG }}" \
               --out "${APP}.app/Contents/Resources/idevicepair.icns"
          xattr -rc "${APP}.app"
          codesign --deep --force --sign - "${APP}.app"
          plutil -lint "${APP}.app/Contents/Info.plist"

      - name: Upload .app Bundle      
        uses: actions/upload-artifact@v4.4.0
        with:
          include-hidden-files: true
          name: ${{ env.APP_NAME }}-${{ env.VERSION }}-macos-universal.app
          path: ${{ env.APP_NAME }}.app


  # Windows: Build and upload .exe
  build-windows:
    name: Build & Upload Windows .exe
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache Cargo registry & build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/index
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-x86_64-pc-windows-msvc
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-pc-windows-msvc

      - name: Build and Rename Executable
        shell: bash
        run: |
          cargo build --release --bin ${{ env.BINARY_NAME }} --target x86_64-pc-windows-msvc
          mkdir -p release
          cp target/x86_64-pc-windows-msvc/release/${{ env.BINARY_NAME }}.exe \
             release/${{ env.APP_NAME }}-${{ env.VERSION }}-windows-x86_64.exe

      - name: Upload Windows .exe
        uses: actions/upload-artifact@v4.4.0
        with:
          include-hidden-files: true
          name: ${{ env.APP_NAME }}-${{ env.VERSION }}-windows-x86_64.exe
          path: release/${{ env.APP_NAME }}-${{ env.VERSION }}-windows-x86_64.exe
