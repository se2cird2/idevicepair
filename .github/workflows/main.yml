name: CI

on:
  push:
    branches: [ main ]

env:
  BINARY_NAME: pair

jobs:
  # Linux x86_64
  build-linux-x64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          rustup component add rustfmt clippy
      - name: Build x86_64
        run: cargo build --release --bin pair

  # Linux ARM64 (native)
  build-linux-arm64:
    runs-on: ubuntu-22.04-arm
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          rustup component add rustfmt clippy
      - name: Build ARM64
        run: cargo build --release --bin pair

  # macOS slices
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [ x86_64-apple-darwin, aarch64-apple-darwin ]
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          rustup component add rustfmt clippy
      - name: Build ${{ matrix.target }}
        run: cargo build --release --bin pair --target ${{ matrix.target }}

  # Combine macOS universal
  universal-macos:
    needs: build-macos
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create universal binary
        run: |
          lipo \
            target/x86_64-apple-darwin/release/pair \
            target/aarch64-apple-darwin/release/pair \
            -create -output target/universal/release/pair

  # Windows x86_64 (native)
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          refreshenv
          rustup component add rustfmt clippy
      - name: Install mingw-w64
        run: choco install mingw -y
      - name: Build Windows
        run: cargo build --release --bin pair --target x86_64-pc-windows-gnu

  # Upload artifacts
  upload:
    needs: [build-linux-x64, build-linux-arm64, universal-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/upload-artifact@v4
        with:
          name: all-binaries
          path: |
            target/release/pair*
            target/universal/release/pair
            target/x86_64-pc-windows-gnu/release/pair.exe
