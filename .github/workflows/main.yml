name: idevicepair gui build

on:
  push:
    branches: [ main ]

env:
  BINARY_NAME: pair
  VERSION: 1.0.0
  ICON_PNG: icons/idevicepair.png

jobs:
  # Linux x86_64 (native build + AppImage)
  build-linux-x64:
    name: Build Linux x86_64 & AppImage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-unknown-linux-gnu

      - name: Install FUSE (libfuse2)
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2

      - name: Build native binary
        run: |
          cargo build --release --bin ${{ env.BINARY_NAME }} --target x86_64-unknown-linux-gnu

      - name: Download appimagetool (x86_64)
        run: |
          wget -c https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool.AppImage
          chmod +x appimagetool.AppImage

      - name: Prepare AppDir for x86_64
        run: |
          mkdir -p AppDir/usr/bin
          cp target/x86_64-unknown-linux-gnu/release/${{ env.BINARY_NAME }} AppDir/usr/bin/
          ICON_FILE=${ICON_PNG##*/}
          cp ${{ env.ICON_PNG }} AppDir/$ICON_FILE
          cat > AppDir/${{ env.BINARY_NAME }}.desktop <<EOF
          [Desktop Entry]
          Type=Application
          Name=iDevicePair
          Exec=${{ env.BINARY_NAME }}
          Icon=$ICON_FILE
          Categories=Utility;
          EOF
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          cp ${{ env.ICON_PNG }} AppDir/usr/share/icons/hicolor/256x256/apps/idevicepair.png

      - name: Build x86_64 AppImage
        run: |
          ./appimagetool.AppImage AppDir iDevicePair-${{ env.VERSION }}-x86_64.AppImage

      - name: Upload x86_64 AppImage
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-appimage
          path: iDevicePair-${{ env.VERSION }}-x86_64.AppImage

  # Linux ARM64 (native build + AppImage)
  build-linux-arm64:
    name: Build Linux ARM64 & AppImage
    runs-on: ubuntu-22.04-arm
    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: aarch64-unknown-linux-gnu

      - name: Install FUSE (libfuse2)
        run: |
          sudo apt-get update
          sudo apt-get install -y libfuse2

      - name: Build native binary
        run: |
          cargo build --release --bin ${{ env.BINARY_NAME }} --target aarch64-unknown-linux-gnu

      - name: Download appimagetool (ARM64)
        run: |
          wget -c https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage -O appimagetool.AppImage
          chmod +x appimagetool.AppImage

      - name: Prepare AppDir for ARM64
        run: |
          mkdir -p AppDir/usr/bin
          cp target/aarch64-unknown-linux-gnu/release/${{ env.BINARY_NAME }} AppDir/usr/bin/
          ICON_FILE=${ICON_PNG##*/}
          cp ${{ env.ICON_PNG }} AppDir/$ICON_FILE
          cat > AppDir/${{ env.BINARY_NAME }}.desktop <<EOF
          [Desktop Entry]
          Type=Application
          Name=iDevicePair
          Exec=${{ env.BINARY_NAME }}
          Icon=$ICON_FILE
          Categories=Utility;
          EOF
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          cp ${{ env.ICON_PNG }} AppDir/usr/share/icons/hicolor/256x256/apps/idevicepair.png

      - name: Build ARM64 AppImage
        run: |
          ./appimagetool.AppImage AppDir iDevicePair-${{ env.VERSION }}-aarch64.AppImage

      - name: Upload ARM64 AppImage
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-appimage
          path: iDevicePair-${{ env.VERSION }}-aarch64.AppImage
