name: CI

on:
  push:
    branches: [ main ]

env:
  BINARY_NAME: pair

jobs:
  # ──────────────────────────────────────────────────────────────────────────────
  # Linux on Ubuntu ─ install Zig + build static
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [ x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu ]

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust + targets
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          rustup component add rustfmt clippy
          rustup target add ${{ matrix.target }}

      - name: Install Zig & cargo-zigbuild
        run: |
          sudo apt-get update
          sudo apt-get install -y zig
          cargo install cargo-zigbuild

      - name: Build Linux ${{ matrix.target }}
        run: cargo zigbuild --release --bin pair --target ${{ matrix.target }}

      - name: Upload Linux ${{ matrix.target }}
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/pair

  # ──────────────────────────────────────────────────────────────────────────────
  # macOS on macos-latest ─ build each slice then universalize
  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [ x86_64-apple-darwin, aarch64-apple-darwin ]

    steps:
      - uses: actions/checkout@v3

      - name: Uninstall Homebrew rustup
        run: brew uninstall rustup rustup-init || true

      - name: Install Rust + targets
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          rustup component add rustfmt clippy
          rustup target add ${{ matrix.target }}

      - name: Build macOS ${{ matrix.target }}
        run: cargo build --release --bin pair --target ${{ matrix.target }}

      - name: Upload macOS ${{ matrix.target }}
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/pair

  # After both macOS slices complete, combine them  
  universal-macos:
    needs: build-macos
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Create universal binary
        run: |
          mkdir -p target/universal/release
          lipo \
            target/x86_64-apple-darwin/release/pair \
            target/aarch64-apple-darwin/release/pair \
            -create -output target/universal/release/pair

      - name: Upload macOS universal
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal
          path: target/universal/release/pair

  # ──────────────────────────────────────────────────────────────────────────────
  # Windows on windows-latest ─ native build with mingw
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [ x86_64-pc-windows-gnu ]

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust + target
        run: |
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          refreshenv
          rustup component add rustfmt clippy
          rustup target add ${{ matrix.target }}

      - name: Install mingw-w64
        run: choco install mingw -y

      - name: Build Windows ${{ matrix.target }}
        run: cargo build --release --bin pair --target ${{ matrix.target }}

      - name: Upload Windows
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/pair.exe
