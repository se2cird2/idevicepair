name: CI

on:
  push:
    branches: [main]

env:
  BINARY_NAME: pair

jobs:
  # ───────────────────────────────────────────────────────────────────────────
  # Linux x86_64 (native)
  build-linux-x64:
    name: Build Linux x86_64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-unknown-linux-gnu

      - name: Build
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target x86_64-unknown-linux-gnu

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64
          path: target/x86_64-unknown-linux-gnu/release/${{ env.BINARY_NAME }}

  # ───────────────────────────────────────────────────────────────────────────
  # Linux ARM64 (native)
  build-linux-arm64:
    name: Build Linux ARM64
    runs-on: ubuntu-22.04-arm
    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: aarch64-unknown-linux-gnu

      - name: Build
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target aarch64-unknown-linux-gnu

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64
          path: target/aarch64-unknown-linux-gnu/release/${{ env.BINARY_NAME }}

  # ───────────────────────────────────────────────────────────────────────────
  # macOS slices (Intel + ARM)
  build-macos-slices:
    name: Build macOS slices
    runs-on: macos-latest
    outputs:
      intel-path: target/x86_64-apple-darwin/release/${{ env.BINARY_NAME }}
      arm-path:   target/aarch64-apple-darwin/release/${{ env.BINARY_NAME }}
    steps:
      - uses: actions/checkout@v3

      - name: Uninstall Homebrew rustup
        run: brew uninstall rustup rustup-init || true

      - name: Set up Rust (Intel)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-apple-darwin

      - name: Build Intel slice
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target x86_64-apple-darwin

      - name: Set up Rust (ARM64)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: aarch64-apple-darwin

      - name: Build ARM64 slice
        run: cargo build --release --bin ${{ env.BINARY_NAME }} --target aarch64-apple-darwin

      - name: Upload Intel slice
        uses: actions/upload-artifact@v4
        with:
          name: macos-x64
          path: ${{ steps.build.outputs.intel-path }}

      - name: Upload ARM64 slice
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64
          path: ${{ steps.build.outputs.arm-path }}

  # ───────────────────────────────────────────────────────────────────────────
  # macOS .app bundle (using cargo-bundle) → zip
  package-macos-app:
    name: Package macOS .app
    needs: build-macos-slices
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install cargo-bundle
        run: |
          cargo install cargo-bundle

      - name: Build & bundle .app
        run: |
          # Ensure both archs are present in target/
          cargo bundle --release --bin ${{ env.BINARY_NAME }} --format osx
          # This produces: target/release/bundle/osx/${BINARY_NAME}.app

      - name: Zip .app
        run: |
          cd target/release/bundle/osx
          zip -r "${{ env.BINARY_NAME }}.app.zip" "${{ env.BINARY_NAME }}.app"

      - name: Upload macOS .app zip
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: target/release/bundle/osx/${{ env.BINARY_NAME }}.app.zip

  # ───────────────────────────────────────────────────────────────────────────
  # Linux AppDir-style tarball + .desktop launcher
  package-linux:
    name: Package Linux AppDir
    needs: [build-linux-x64, build-linux-arm64]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Linux x86_64 binary
        uses: actions/download-artifact@v4
        with:
          name: linux-x64
          path: linux-x64

      - name: Download Linux ARM64 binary
        uses: actions/download-artifact@v4
        with:
          name: linux-arm64
          path: linux-arm64

      - name: Create AppDir layout
        run: |
          mkdir -p dist/AppDir/usr/bin
          cp linux-x64/${{ env.BINARY_NAME }} dist/AppDir/usr/bin/${{ env.BINARY_NAME }}-x86_64
          cp linux-arm64/${{ env.BINARY_NAME }} dist/AppDir/usr/bin/${{ env.BINARY_NAME }}-aarch64

          # A simple launcher script that picks the right arch
          cat > dist/AppDir/AppRun <<'EOF'
          #!/usr/bin/env sh
          ARCH=$(uname -m)
          if [ "$ARCH" = "x86_64" ]; then
            exec usr/bin/${{ env.BINARY_NAME }}-x86_64 "$@"
          else
            exec usr/bin/${{ env.BINARY_NAME }}-aarch64 "$@"
          fi
          EOF
          chmod +x dist/AppDir/AppRun

          # .desktop file with Terminal=false so no console
          mkdir -p dist/AppDir/usr/share/applications
          cat > dist/AppDir/usr/share/applications/${{ env.BINARY_NAME }}.desktop <<EOF
          [Desktop Entry]
          Type=Application
          Name=iOS Pair Utility
          Exec=${{ env.BINARY_NAME }}
          Icon=iOSPairGUI
          Terminal=false
          Categories=Utility;
          EOF

          # Package it up
          tar -C dist/AppDir -czf dist/${{ env.BINARY_NAME }}-linux.tar.gz .

      - name: Upload Linux package
        uses: actions/upload-artifact@v4
        with:
          name: linux-appdir
          path: dist/${{ env.BINARY_NAME }}-linux.tar.gz
