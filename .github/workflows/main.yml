name: CI

on:
  push:
    branches: [ main ]

env:
  BINARY_NAME: pair

jobs:
  build:
    name: Build all targets
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false                            # don’t cancel other cells on failure :contentReference[oaicite:9]{index=9}
      matrix:
        include:
          # Linux native builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: linux-x64

          - os: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            artifact: linux-arm64

          # macOS slices
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: macos-x64

          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: macos-arm64

          # Windows native MSVC
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: windows-msvc

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Rust
        uses: actions-rs/toolchain@v1              # declarative Rust install :contentReference[oaicite:10]{index=10}
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: ${{ matrix.target }}              # install this target :contentReference[oaicite:11]{index=11}

      # macOS-specific dependencies
      - name: Install iOS device libraries
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install libimobiledevice             # communicate with iOS devices :contentReference[oaicite:12]{index=12}
          brew install libplist                     # Apple property-list library :contentReference[oaicite:13]{index=13}
          brew install libusbmuxd                   # USB multiplexing daemon :contentReference[oaicite:14]{index=14}

      - name: Build ${{ matrix.artifact }}
        run: |
          cargo build \
            --release \
            --bin ${{ env.BINARY_NAME }} \
            --target ${{ matrix.target }}

      - name: Upload ${{ matrix.artifact }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  universal-macos:
    name: Create macOS universal binary
    needs: build
    runs-on: macos-latest
    if: always()                                # run even if some builds failed :contentReference[oaicite:15]{index=15}
    steps:
      - name: Download x86_64 slice
        uses: actions/download-artifact@v4       # download each slice :contentReference[oaicite:16]{index=16}
        with:
          name: macos-x64
          path: slice-x64
        continue-on-error: true                  # don’t fail if missing :contentReference[oaicite:17]{index=17}

      - name: Download ARM64 slice
        uses: actions/download-artifact@v4
        with:
          name: macos-arm64
          path: slice-arm64
        continue-on-error: true

      - name: Create universal binary
        run: |
          if [[ -f slice-x64/${{ env.BINARY_NAME }} && -f slice-arm64/${{ env.BINARY_NAME }} ]]; then
            mkdir -p target/universal/release
            lipo \
              slice-x64/${{ env.BINARY_NAME }} \
              slice-arm64/${{ env.BINARY_NAME }} \
              -create -output target/universal/release/${{ env.BINARY_NAME }}
          else
            echo "Skipping universal: missing slices"
          fi

      - name: Upload macOS universal
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal
          path: target/universal/release/${{ env.BINARY_NAME }}
